name: CI and Image Push

on: 
  push:
    branches:
      - feature/*
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # TODO stretch goal - enable time permitting
      #   with:
      #     args: --sarif-file-output=snyk.sarif
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif
  build:
    needs: security
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Node Test and Build
        uses: actions/setup-node@v3
        with:
          # node-version: ${{ matrix.node-version}}
          node-version: 18.x
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

      # - name: ACR Login
      #   uses: azure/docker-login@v1
      #   with:
      #     login-server: xyzappsample.azurecr.io
      #     username: ${{ secrets.ACR_USER }}
      #     password: ${{ secrets.ACR_TOKEN }}
      # - name: Docker Image Build and Push
      #   run: |
      #     docker build -t 'xyzappsample.azurecr.io/sample/xyzsample:${{ github.sha}}' .
      #     docker push 'xyzappsample.azurecr.io/sample/xyzsample:${{ github.sha }}'

          
      # - run: |
      #     az acr build --image sample/xyzsample:v2 --registry xyzappsample.azurecr.io --file Dockerfile .
      # - name: ACR Build and Push
      #   uses: azure/acr-build@v1
      #   with:
      #     service_principal: ${{ secrets.service_principal }}
      #     service_principal_password: ${{ secrets.service_principal_password }}
      #     tenant: ${{ secrets.az_tenant_id }}
      #     registry: xyzappsample.azurecr.io
      #     repository: sample/xyzsample
      #     image: xyzsample
      - name: ACR Build
        id: build-push-acr
        uses: azure/acr-build@v1
        with:
          service_principal: ${{ secrets.az_service_principal }}
          service_principal_password: ${{ secrets.az_service_principal_password }}
          tenant: ${{ secrets.az_tenant_id }}
          registry: xyzappsample
          repository: sample
          image: xyzsample
          branch: main
          tag: ${{ github.sha}}
  deploy:
    needs: build
    if: github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Azure Login
        id: login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.az_credentials }}
      - name: Set AKS Context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'rg-poc-eus-xyz_app'
          cluster-name: 'aks-xyz-poc-eus-xyz_app'
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to AKS
        id: deploy-aks
        uses: azure/k8s-deploy@v4
        with:
          namespace: 'xyz-app'
          manifests: |
            deploy.yaml
          images: 'xyzappsample.azurecr.io/sample/xyzsample:${{ github.sha }}'
          pull-images: false
      - run: |
          kubectl get svc -n xyz-app

